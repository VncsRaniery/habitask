generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id               String            @id @default(cuid())
    name             String?
    email            String?           @unique
    emailVerified    DateTime?         @map("email_verified")
    image            String?
    password         String?
    accounts         Account[]
    sessions         Session[]
    tasks            Task[]
    routines         RoutineItem[]
    pomodoroSessions SessionPomodoro[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Task {
    id             String   @id @default(cuid())
    title          String
    description    String
    category       String
    startDate      DateTime
    dueDate        DateTime
    status         String
    priority       String
    importance     String
    assignedTo     String
    estimatedHours Float
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RoutineItem {
    id        String           @id @default(cuid())
    title     String
    dayOfWeek Int
    time      String
    completed Boolean          @default(false)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
    history   RoutineHistory[]

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RoutineHistory {
    id         String      @id @default(cuid())
    routineId  String
    routine    RoutineItem @relation(fields: [routineId], references: [id], onDelete: Cascade)
    completed  Boolean
    date       DateTime
    weekNumber Int
    yearNumber Int
    createdAt  DateTime    @default(now())
}

model SessionPomodoro {
    id             String    @id @default(cuid())
    type           String // "pomodoro", "shortBreak", "longBreak"
    startTime      DateTime
    endTime        DateTime?
    isCompleted    Boolean   @default(false)
    duration       Int
    extraTime      Int       @default(0)
    pauseCount     Int       @default(0)
    totalPauseTime Int       @default(0)
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
